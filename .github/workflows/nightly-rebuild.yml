---
name: Nightly CI
on:
  push:
    branches:
      - develop
#   schedule:
#     - cron: '0 2 * * *'

jobs:

  generate-packages-matrix:
    name: Get packages matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: set-matrix
        run: |
          cd packages
          matrix=""
          for i in $(ls -d */); do
            matrix="$matrix{\"pkg\":\"${i%%/}\"},"
          done
          matrix="${matrix%,}"
          echo "matrix={\"include\":[${matrix}]}"  >> $GITHUB_OUTPUT


  
  makepkg:
    name: makepkg
    needs: generate-packages-matrix
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{fromJson(needs.generate-packages-matrix.outputs.matrix)}}

    steps:
      - name: Cat matrix
        run: echo "${{ matrix.pkg }}"
      # - name: Check out the codebase.
      #   uses: actions/checkout@v3
      #   with:
      #     submodules: 'true'

      # - name: Exit if pkg doesn't exist.
      #   run: if [ ! -d "${{ matrix.pkg }}" ]; then exit 1; fi

      # - name: Pull devel image.
      #   run: docker pull quay.io/aminvakil/archlinux:devel

      # - name: Run a container of devel image and mount package on it.
      #   run: |
      #     container_id=$(mktemp)
      #     docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -v "${PWD}/${{ matrix.pkg }}":/pkg quay.io/aminvakil/archlinux:devel > "${container_id}"
      #     echo "container_id=$container_id" >> $GITHUB_ENV

      # - name: Execute stuff before makepkg if there is any.
      #   run: |
      #     if [ -f ci/"${{ matrix.pkg }}"/before_makepkg.sh ]; then
      #         shellcheck ci/"${{ matrix.pkg }}"/before_makepkg.sh
      #         docker exec -i "$(cat ${container_id})" sh < ci/"${{ matrix.pkg }}"/before_makepkg.sh
      #     fi

      # - name: Upgrade all packages.
      #   run: docker exec "$(cat ${container_id})" pacman -Suy --noconfirm

      # - name: Change ownership of package folder
      #   run: "docker exec $(cat ${container_id}) chown -R devel: /pkg"

      # - name: Install namcap
      #   run: docker exec "$(cat ${container_id})" pacman -S namcap --noconfirm

      # - name: Install Paru
      #   run: |
      #     docker exec "$(cat ${container_id})" pacman -S --needed base-devel --noconfirm
      #     docker exec "$(cat ${container_id})" pacman -S cargo --noconfirm
      #     docker exec "$(cat ${container_id})" pacman -S git --noconfirm
      #     docker exec $(cat ${container_id}) mkdir /tmp/paru
      #     docker exec $(cat ${container_id}) chown -R devel: /tmp/paru      
      #     docker exec -w /tmp/paru "$(cat ${container_id})" su devel sh -c "git clone https://aur.archlinux.org/paru.git ."
      #     docker exec -w /tmp/paru "$(cat ${container_id})" su devel sh -c "makepkg -si --noconfirm"

      # - name: Namcap!
      #   run: if [ ! -f ci/"${{ matrix.pkg }}"/namcap_skip ]; then docker exec "$(cat ${container_id})" su devel sh -c "cd /pkg && namcap PKGBUILD"; fi

      # - name: Makepkg!
      #   run: docker exec "$(cat ${container_id})" su devel sh -c "cd /pkg && paru -Ui --noconfirm"

      # - name: Execute stuff after makepkg if there is any.
      #   run: |
      #     if [ -f ci/"${{ matrix.pkg }}"/after_makepkg.sh ]; then
      #         shellcheck ci/"${{ matrix.pkg }}"/after_makepkg.sh
      #         docker exec -i "$(cat ${container_id})" sh < ci/"${{ matrix.pkg }}"/after_makepkg.sh
      #     fi

      # - name: Stop and remove container forcefully.
      #   run: docker rm -f "$(cat ${container_id})"
